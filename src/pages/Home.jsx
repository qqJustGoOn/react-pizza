import React from 'react';
import qs from 'qs';
import {useDispatch, useSelector} from "react-redux";
import {useNavigate} from "react-router-dom";

import {Categories} from "../components/Categories";
import {list, Sort} from "../components/Sort";
import Skeleton from "../components/PizzaBlock/Skeleton";
import {PizzaBlock} from "../components/PizzaBlock";
import Pagination from "../components/Pagination";
// import {SearchContext} from "../App";
import {setCategoryId, setCurrentPage, setFilters} from "../redux/slices/filterSlice";
import {fetchPizzas} from "../redux/slices/pizzaSlice";
import styles from "../components/NotFoundBlock/NotFoundBlock.module.scss";

const Home = () => {
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const isSearch = React.useRef(false);
    const isMounted = React.useRef(false);

    const {categoryId, sort, currentPage, searchValue} = useSelector((state) => state.filter);
    const {items, status} = useSelector((state) => state.pizza);
    // const { categoryId, currentPage, sort: { sortProperty: sortType } } = useSelector(state => state.filter)
    const sortType = sort.sortProperty;

    // const {searchValue} = React.useContext(SearchContext);
    const [orderType, setOrderType] = React.useState(true);


    const onSetCategory = (id) => {
        dispatch(setCategoryId(id));
    };
    const onChangePage = (number) => {
        dispatch(setCurrentPage(number));
    }

    const getPizzas = async () => {
        const category = categoryId > 0 ? `category=${categoryId}` : '';
        const search = searchValue ? `&search=${searchValue}` : '';
        const sortBy = sortType.replace('-', '');
        const order = sortType.includes('-') ? 'asc' : 'desc';

        //–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Ü—Ü –∏—Å–ø–æ–ª—å–∑—É—è createAsyncThunk
        dispatch(
            fetchPizzas({
                category,
                search,
                sortBy,
                order,
                currentPage,
            })
        );

        window.scrollTo(0, 0);
    }
    // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URl-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥—É–∫—Å–µ
    React.useEffect(() => {
        if (window.location.search) {
            //–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
            const params = qs.parse(window.location.search.substring(1));
            const sort = list.find(obj => obj.sortProperty === params.sortProperty);
            dispatch(
                //–ø–µ—Ä–µ–¥–∞–µ–º –≤ —Ä–µ–¥–∞–∫—Å
                setFilters({
                    ...params,
                    sort
                })
            );
            isSearch.current = true;
        }
    }, []);

    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
    React.useEffect(() => {
        //–ï—Å–ª–∏ –£–ñ–ï –ë–´–õ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏ –¥–µ–π—Å—Ç–≤–∏–µ
        if (isMounted.current) {
            //–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –≤—à–∏—Ç—å –ø–æ—Ç–æ–º –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ—á–∫—É
            const queryString = qs.stringify({
                sortProperty: sort.sortProperty,
                categoryId,
                currentPage
            })
            //–≤—à–∏–≤–∞–µ–º –≤ —Å—Å—ã–ª–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ä–µ–¥–∞–∫—Å–∞
            navigate(`?${queryString}`);
        }
        //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
        isMounted.current = true;
    }, [categoryId, sortType, currentPage]);

    // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
    React.useEffect(() => {
        window.scrollTo(0, 0);

        if (!isSearch.current) {
            getPizzas();
        }

        isSearch.current = false;
    }, [categoryId, sortType, searchValue, currentPage]);


    // const pizzas = items.filter((obj) => obj.title.toLowerCase().includes(searchValue.toLowerCase())
    // }).map(...)
    const pizzas = items.map((obj) => <PizzaBlock key={obj.id} {...obj} />);
    const skeletons = [...new Array(4)].map((_, i) => <Skeleton key={i}/>);

    return (
        <div className="container">
            <div className="content__top">
                <Categories categoryId={categoryId} changeCategory={(id) => onSetCategory(id)}/>
                <Sort orderType={orderType} setOrderType={setOrderType}/>
            </div>
            <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
            {status === 'error' ? (
                <div className="content__error-info">
                    <h2> üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï
                    </h2>
                    <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–∏—Ü—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                </div>
            ) : (
                <div className="content__items">
                    {
                        status === 'loading'
                            ? skeletons
                            : pizzas
                    }
                </div>
            )}

            <Pagination currentPage={currentPage} onChangePage={onChangePage}/>
        </div>
    );
};

export default Home;